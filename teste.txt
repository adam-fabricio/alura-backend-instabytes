import express from "express";
import routes from "./src/routes/postsRoutes.js";

const app = express();

app.use(express.static("uploads"));
routes(app);

// Inicia o servidor Express na porta 3000. A função callback (seta de função)
// é executada quando o servidor estiver ouvindo.
app.listen(3000, () => {
  console.log("Servidor escutando..."); // Mensagem de log indicando que o servidor está ativo
});

import { MongoClient } from 'mongodb';

export default async function conectarAoBanco(stringConexao) {
  let mongoClient;

  try {
      mongoClient = new MongoClient(stringConexao);
      console.log('Conectando ao cluster do banco de dados...');
      await mongoClient.connect();
      console.log('Conectado ao MongoDB Atlas com sucesso!');

      return mongoClient;
  } catch (erro) {
      console.error('Falha na conexão com o banco!', erro);
      process.exit();
  }
}
import fs from "fs";
import { getTodosPosts, criarPost, atualizarPost } from "../models/postsModels.js";
import gerarDescricaoComGemini from "../services/geminiService.js";



export async function listarPosts(req, res) {
    // Chama a função `getTodosPosts` para buscar todos os posts de forma assíncrona
    // e aguarda a resolução da promessa antes de prosseguir.
    const posts = await getTodosPosts();
    // Envia uma resposta com o status code 200 (OK) e o array de posts
    // no formato JSON
    res.status(200).json(posts);
}

export async function postarNovoPost(req, res) {
  const novoPost = req.body;
  try {
    const postCriado = await criarPost(novoPost);
    res.status(200).json(postCriado);
  } catch(erro) {
    console.error(erro.message);
    res.status(500).json({"Erro": "Falha na requisição"});
  }
}


export async function uploadImagem(req, res) {
  const novoPost = {
    descricao: "",
    imgUrl: req.file.originalname,
    alt: ""
  };
  try {
    const postCriado = await criarPost(novoPost);
    const imagemAtualizada = `uploads/${postCriado.insertedId}.png`;
    fs.renameSync(req.file.path, imagemAtualizada);
    res.status(200).json(postCriado);
  } catch(erro) {
    console.error(erro.message);
    res.status(500).json({"Erro": "Falha na requisição"});
  }
}

export async function atualizarNovoPost(req, res) {
  const id = req.params.id;
  const urlImagem = `http://localhost:3000/${id}.png`;

  try {
    const imgBuffer = fs.readFileSync(`uploads/${id}.png`);
    const descricao = await gerarDescricaoComGemini(imgBuffer);

    const post = {
      imgUrl: urlImagem,
      descricao: descricao,
      alt: req.body.alt
    }
    const postCriado = await atualizarPost(id, post);
    res.status(200).json(postCriado);
  } catch(erro) {
    console.error(erro.message);
    res.status(500).json({"Erro": "Falha na requisição"});
  }
}
import 'dotenv/config'
import conectarAoBanco from "../config/dbConfig.js";
import  { ObjectId } from "mongodb";


const conexao = await conectarAoBanco(process.env.STRING_CONEXAO);


// Função assíncrona que recupera todos os posts do banco de dados
export async function getTodosPosts() {
  // Acessa o banco de dados usando a conexão estabelecida (`conexao`)
  // e seleciona o database "imersao-instabytes"
  const db = conexao.db("imersao-instabytes");

  // Obtém a coleção "posts" do banco de dados selecionado
  const colecao = db.collection("posts");

  // Utiliza o método `find()` para recuperar todos os documentos da coleção
  // e converte o resultado para um array usando `toArray()`
  return colecao.find().toArray();
}

export async function criarPost(novoPost) {
  const db = conexao.db("imersao-instabytes");
  const colecao = db.collection("posts");
  return colecao.insertOne(novoPost);
}

export async function atualizarPost(id, novoPost) {
  const db = conexao.db("imersao-instabytes");
  const colecao = db.collection("posts");
  const objID = ObjectId.createFromHexString(id);

  return colecao.updateOne({_id: new ObjectId(objID)}, {$set:novoPost});
}

import express from "express";
import multer from "multer";
import cors from "cors";
import { listarPosts, postarNovoPost, uploadImagem, atualizarNovoPost } from "../controllers/postsControllers.js";

const corsOptions = {
  origin: "http://localhost:8000",
  optionsSuccessStatus: 200
}

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'uploads/');
    },
    filename: function (req, file, cb) {
        cb(null, file.originalname);
    }
})

const upload = multer({ dest: "./uploads" , storage})

// linux
//const upload = multer({dest: "./upload"});

const routes = (app) => {
  // Habilita o middleware `express.json()` para permitir que o servidor
  // parse dados JSON enviados no corpo das requisições (req.body)
  app.use(express.json());
  app.use(cors(corsOptions));
  // Rota GET para o endpoint "/posts" que recupera todos os posts
  app.get("/posts", listarPosts);
  app.post("/posts", postarNovoPost);
  app.post("/upload", upload.single("imagem"), uploadImagem);
  app.put("/upload/:id", atualizarNovoPost);
}

export default routes;
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

export default async function gerarDescricaoComGemini(imageBuffer) {
  const prompt =
    "Gere uma descrição em português do brasil para a seguinte imagem";

  try {
    const image = {
      inlineData: {
        data: imageBuffer.toString("base64"),
        mimeType: "image/png",
      },
    };
    const res = await model.generateContent([prompt, image]);
    return res.response.text() || "Alt-text não disponível.";
  } catch (erro) {
    console.error("Erro ao obter alt-text:", erro.message, erro);
    throw new Error("Erro ao obter o alt-text do Gemini.");
  }
}
